{{- if and .Values.postgres.schemaInit.enabled .Values.postgres.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "reference-app-wms-go.fullname" . }}-db-init
  labels:
    app: {{ include "reference-app-wms-go.name" . }}
    component: db-init
spec:
  backoffLimit: 0
  template:
    metadata:
      labels:
        app: {{ include "reference-app-wms-go.name" . }}
        component: db-init
    spec:
      restartPolicy: Never
      containers:
      - name: db-init
        image: {{ .Values.postgres.image }}
        imagePullPolicy: IfNotPresent
        env:
          - name: PGPASSWORD
            value: {{ .Values.postgres.config.password | quote }}
        volumeMounts:
          - name: schema-vol
            mountPath: /tmp/schema
            readOnly: true
        command: ["/bin/sh","-c"]
        args:
          - |
            echo "Waiting for Postgres readiness..."
            for i in $(seq 1 30); do
              pg_isready -h {{ include "reference-app-wms-go.fullname" . }}-postgres -p {{ .Values.postgres.port }} -U {{ .Values.postgres.config.user }} && break
              echo "Still not ready, retry in 2s..."
              sleep 2
            done

            echo "Running schema.sql..."
            psql -h {{ include "reference-app-wms-go.fullname" . }}-postgres \
                 -p {{ .Values.postgres.port }}\
                 -U {{ .Values.postgres.config.user }} \
                 -d {{ .Values.postgres.config.dbName }} \
                 -f /tmp/schema/schema.sql
            echo "Schema initialization completed."
      volumes:
      - name: schema-vol
        configMap:
          name: {{ include "reference-app-wms-go.fullname" . }}-schema
          items:
            - key: schema.sql
              path: schema.sql
{{- end }}
