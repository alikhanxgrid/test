// Package apiv2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package apiv2

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a new job site
	// (POST /job-sites)
	CreateJobSite(c *gin.Context)
	// Get a job site by ID
	// (GET /job-sites/{siteID})
	GetJobSite(c *gin.Context, siteID string)
	// Get worker attendance records for a job site on a specific date
	// (GET /job-sites/{siteID}/attendance)
	GetSiteAttendance(c *gin.Context, siteID string, params GetSiteAttendanceParams)
	// Get all schedules for a job site
	// (GET /job-sites/{siteID}/schedules)
	GetSchedules(c *gin.Context, siteID string)
	// Create a new schedule for a job site
	// (POST /job-sites/{siteID}/schedules)
	CreateSchedule(c *gin.Context, siteID string)
	// Get currently active schedules for a job site
	// (GET /job-sites/{siteID}/schedules/active)
	GetActiveSchedules(c *gin.Context, siteID string)
	// Get upcoming schedules for a job site
	// (GET /job-sites/{siteID}/schedules/upcoming)
	GetUpcomingSchedules(c *gin.Context, siteID string)
	// Validate schedule overlap
	// (POST /job-sites/{siteID}/schedules/validate)
	ValidateScheduleOverlap(c *gin.Context, siteID string)
	// Create a new task under a schedule for a job site
	// (POST /job-sites/{siteID}/tasks)
	CreateTask(c *gin.Context, siteID string)
	// Get a schedule by ID
	// (GET /schedules/{scheduleID})
	GetScheduleById(c *gin.Context, scheduleID string)
	// Get task details by task ID
	// (GET /tasks/{taskID})
	GetTaskById(c *gin.Context, taskID string)
	// Update the status of a task
	// (PUT /tasks/{taskID}/status)
	UpdateTaskStatus(c *gin.Context, taskID string)
	// Record worker attendance (check-in)
	// (POST /workers/{workerID}/attendance)
	RecordWorkerAttendance(c *gin.Context, workerID string)
	// Update worker attendance (check-out)
	// (PUT /workers/{workerID}/attendance)
	UpdateWorkerAttendance(c *gin.Context, workerID string)
	// Get tasks for a worker on a specific date
	// (GET /workers/{workerID}/tasks)
	GetWorkerTasks(c *gin.Context, workerID string, params GetWorkerTasksParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// CreateJobSite operation middleware
func (siw *ServerInterfaceWrapper) CreateJobSite(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateJobSite(c)
}

// GetJobSite operation middleware
func (siw *ServerInterfaceWrapper) GetJobSite(c *gin.Context) {

	var err error

	// ------------- Path parameter "siteID" -------------
	var siteID string

	err = runtime.BindStyledParameterWithOptions("simple", "siteID", c.Param("siteID"), &siteID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter siteID: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetJobSite(c, siteID)
}

// GetSiteAttendance operation middleware
func (siw *ServerInterfaceWrapper) GetSiteAttendance(c *gin.Context) {

	var err error

	// ------------- Path parameter "siteID" -------------
	var siteID string

	err = runtime.BindStyledParameterWithOptions("simple", "siteID", c.Param("siteID"), &siteID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter siteID: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSiteAttendanceParams

	// ------------- Optional query parameter "date" -------------

	err = runtime.BindQueryParameter("form", true, false, "date", c.Request.URL.Query(), &params.Date)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter date: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSiteAttendance(c, siteID, params)
}

// GetSchedules operation middleware
func (siw *ServerInterfaceWrapper) GetSchedules(c *gin.Context) {

	var err error

	// ------------- Path parameter "siteID" -------------
	var siteID string

	err = runtime.BindStyledParameterWithOptions("simple", "siteID", c.Param("siteID"), &siteID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter siteID: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSchedules(c, siteID)
}

// CreateSchedule operation middleware
func (siw *ServerInterfaceWrapper) CreateSchedule(c *gin.Context) {

	var err error

	// ------------- Path parameter "siteID" -------------
	var siteID string

	err = runtime.BindStyledParameterWithOptions("simple", "siteID", c.Param("siteID"), &siteID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter siteID: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateSchedule(c, siteID)
}

// GetActiveSchedules operation middleware
func (siw *ServerInterfaceWrapper) GetActiveSchedules(c *gin.Context) {

	var err error

	// ------------- Path parameter "siteID" -------------
	var siteID string

	err = runtime.BindStyledParameterWithOptions("simple", "siteID", c.Param("siteID"), &siteID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter siteID: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetActiveSchedules(c, siteID)
}

// GetUpcomingSchedules operation middleware
func (siw *ServerInterfaceWrapper) GetUpcomingSchedules(c *gin.Context) {

	var err error

	// ------------- Path parameter "siteID" -------------
	var siteID string

	err = runtime.BindStyledParameterWithOptions("simple", "siteID", c.Param("siteID"), &siteID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter siteID: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUpcomingSchedules(c, siteID)
}

// ValidateScheduleOverlap operation middleware
func (siw *ServerInterfaceWrapper) ValidateScheduleOverlap(c *gin.Context) {

	var err error

	// ------------- Path parameter "siteID" -------------
	var siteID string

	err = runtime.BindStyledParameterWithOptions("simple", "siteID", c.Param("siteID"), &siteID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter siteID: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ValidateScheduleOverlap(c, siteID)
}

// CreateTask operation middleware
func (siw *ServerInterfaceWrapper) CreateTask(c *gin.Context) {

	var err error

	// ------------- Path parameter "siteID" -------------
	var siteID string

	err = runtime.BindStyledParameterWithOptions("simple", "siteID", c.Param("siteID"), &siteID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter siteID: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateTask(c, siteID)
}

// GetScheduleById operation middleware
func (siw *ServerInterfaceWrapper) GetScheduleById(c *gin.Context) {

	var err error

	// ------------- Path parameter "scheduleID" -------------
	var scheduleID string

	err = runtime.BindStyledParameterWithOptions("simple", "scheduleID", c.Param("scheduleID"), &scheduleID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter scheduleID: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetScheduleById(c, scheduleID)
}

// GetTaskById operation middleware
func (siw *ServerInterfaceWrapper) GetTaskById(c *gin.Context) {

	var err error

	// ------------- Path parameter "taskID" -------------
	var taskID string

	err = runtime.BindStyledParameterWithOptions("simple", "taskID", c.Param("taskID"), &taskID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter taskID: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTaskById(c, taskID)
}

// UpdateTaskStatus operation middleware
func (siw *ServerInterfaceWrapper) UpdateTaskStatus(c *gin.Context) {

	var err error

	// ------------- Path parameter "taskID" -------------
	var taskID string

	err = runtime.BindStyledParameterWithOptions("simple", "taskID", c.Param("taskID"), &taskID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter taskID: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateTaskStatus(c, taskID)
}

// RecordWorkerAttendance operation middleware
func (siw *ServerInterfaceWrapper) RecordWorkerAttendance(c *gin.Context) {

	var err error

	// ------------- Path parameter "workerID" -------------
	var workerID string

	err = runtime.BindStyledParameterWithOptions("simple", "workerID", c.Param("workerID"), &workerID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter workerID: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RecordWorkerAttendance(c, workerID)
}

// UpdateWorkerAttendance operation middleware
func (siw *ServerInterfaceWrapper) UpdateWorkerAttendance(c *gin.Context) {

	var err error

	// ------------- Path parameter "workerID" -------------
	var workerID string

	err = runtime.BindStyledParameterWithOptions("simple", "workerID", c.Param("workerID"), &workerID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter workerID: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateWorkerAttendance(c, workerID)
}

// GetWorkerTasks operation middleware
func (siw *ServerInterfaceWrapper) GetWorkerTasks(c *gin.Context) {

	var err error

	// ------------- Path parameter "workerID" -------------
	var workerID string

	err = runtime.BindStyledParameterWithOptions("simple", "workerID", c.Param("workerID"), &workerID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter workerID: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetWorkerTasksParams

	// ------------- Optional query parameter "date" -------------

	err = runtime.BindQueryParameter("form", true, false, "date", c.Request.URL.Query(), &params.Date)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter date: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetWorkerTasks(c, workerID, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/job-sites", wrapper.CreateJobSite)
	router.GET(options.BaseURL+"/job-sites/:siteID", wrapper.GetJobSite)
	router.GET(options.BaseURL+"/job-sites/:siteID/attendance", wrapper.GetSiteAttendance)
	router.GET(options.BaseURL+"/job-sites/:siteID/schedules", wrapper.GetSchedules)
	router.POST(options.BaseURL+"/job-sites/:siteID/schedules", wrapper.CreateSchedule)
	router.GET(options.BaseURL+"/job-sites/:siteID/schedules/active", wrapper.GetActiveSchedules)
	router.GET(options.BaseURL+"/job-sites/:siteID/schedules/upcoming", wrapper.GetUpcomingSchedules)
	router.POST(options.BaseURL+"/job-sites/:siteID/schedules/validate", wrapper.ValidateScheduleOverlap)
	router.POST(options.BaseURL+"/job-sites/:siteID/tasks", wrapper.CreateTask)
	router.GET(options.BaseURL+"/schedules/:scheduleID", wrapper.GetScheduleById)
	router.GET(options.BaseURL+"/tasks/:taskID", wrapper.GetTaskById)
	router.PUT(options.BaseURL+"/tasks/:taskID/status", wrapper.UpdateTaskStatus)
	router.POST(options.BaseURL+"/workers/:workerID/attendance", wrapper.RecordWorkerAttendance)
	router.PUT(options.BaseURL+"/workers/:workerID/attendance", wrapper.UpdateWorkerAttendance)
	router.GET(options.BaseURL+"/workers/:workerID/tasks", wrapper.GetWorkerTasks)
}
