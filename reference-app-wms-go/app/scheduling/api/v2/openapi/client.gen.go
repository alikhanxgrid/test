// Package apiv2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package apiv2

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// CreateJobSiteWithBody request with any body
	CreateJobSiteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateJobSite(ctx context.Context, body CreateJobSiteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobSite request
	GetJobSite(ctx context.Context, id JobSiteId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSiteAttendance request
	GetSiteAttendance(ctx context.Context, id JobSiteId, params *GetSiteAttendanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSchedules request
	GetSchedules(ctx context.Context, id JobSiteId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateScheduleWithBody request with any body
	CreateScheduleWithBody(ctx context.Context, id JobSiteId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSchedule(ctx context.Context, id JobSiteId, body CreateScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetActiveSchedules request
	GetActiveSchedules(ctx context.Context, id JobSiteId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUpcomingSchedules request
	GetUpcomingSchedules(ctx context.Context, id JobSiteId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ValidateScheduleOverlapWithBody request with any body
	ValidateScheduleOverlapWithBody(ctx context.Context, id JobSiteId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ValidateScheduleOverlap(ctx context.Context, id JobSiteId, body ValidateScheduleOverlapJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTaskWithBody request with any body
	CreateTaskWithBody(ctx context.Context, id JobSiteId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateTask(ctx context.Context, id JobSiteId, body CreateTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSchedule request
	GetSchedule(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTask request
	GetTask(ctx context.Context, id TaskId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateTaskStatusWithBody request with any body
	UpdateTaskStatusWithBody(ctx context.Context, id TaskId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateTaskStatus(ctx context.Context, id TaskId, body UpdateTaskStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkerTasks request
	GetWorkerTasks(ctx context.Context, id string, params *GetWorkerTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RecordWorkerAttendanceWithBody request with any body
	RecordWorkerAttendanceWithBody(ctx context.Context, workerID WorkerId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RecordWorkerAttendance(ctx context.Context, workerID WorkerId, body RecordWorkerAttendanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateWorkerAttendanceWithBody request with any body
	UpdateWorkerAttendanceWithBody(ctx context.Context, workerID WorkerId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateWorkerAttendance(ctx context.Context, workerID WorkerId, body UpdateWorkerAttendanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) CreateJobSiteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateJobSiteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateJobSite(ctx context.Context, body CreateJobSiteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateJobSiteRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobSite(ctx context.Context, id JobSiteId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobSiteRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSiteAttendance(ctx context.Context, id JobSiteId, params *GetSiteAttendanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSiteAttendanceRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSchedules(ctx context.Context, id JobSiteId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSchedulesRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateScheduleWithBody(ctx context.Context, id JobSiteId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateScheduleRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSchedule(ctx context.Context, id JobSiteId, body CreateScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateScheduleRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetActiveSchedules(ctx context.Context, id JobSiteId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetActiveSchedulesRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUpcomingSchedules(ctx context.Context, id JobSiteId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUpcomingSchedulesRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ValidateScheduleOverlapWithBody(ctx context.Context, id JobSiteId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewValidateScheduleOverlapRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ValidateScheduleOverlap(ctx context.Context, id JobSiteId, body ValidateScheduleOverlapJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewValidateScheduleOverlapRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTaskWithBody(ctx context.Context, id JobSiteId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTaskRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTask(ctx context.Context, id JobSiteId, body CreateTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTaskRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSchedule(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetScheduleRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTask(ctx context.Context, id TaskId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTaskRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTaskStatusWithBody(ctx context.Context, id TaskId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTaskStatusRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTaskStatus(ctx context.Context, id TaskId, body UpdateTaskStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTaskStatusRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkerTasks(ctx context.Context, id string, params *GetWorkerTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkerTasksRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RecordWorkerAttendanceWithBody(ctx context.Context, workerID WorkerId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRecordWorkerAttendanceRequestWithBody(c.Server, workerID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RecordWorkerAttendance(ctx context.Context, workerID WorkerId, body RecordWorkerAttendanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRecordWorkerAttendanceRequest(c.Server, workerID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWorkerAttendanceWithBody(ctx context.Context, workerID WorkerId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWorkerAttendanceRequestWithBody(c.Server, workerID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWorkerAttendance(ctx context.Context, workerID WorkerId, body UpdateWorkerAttendanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWorkerAttendanceRequest(c.Server, workerID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewCreateJobSiteRequest calls the generic CreateJobSite builder with application/json body
func NewCreateJobSiteRequest(server string, body CreateJobSiteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateJobSiteRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateJobSiteRequestWithBody generates requests for CreateJobSite with any type of body
func NewCreateJobSiteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/job-sites")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetJobSiteRequest generates requests for GetJobSite
func NewGetJobSiteRequest(server string, id JobSiteId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/job-sites/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSiteAttendanceRequest generates requests for GetSiteAttendance
func NewGetSiteAttendanceRequest(server string, id JobSiteId, params *GetSiteAttendanceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/job-sites/%s/attendance", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Date != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date", runtime.ParamLocationQuery, *params.Date); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSchedulesRequest generates requests for GetSchedules
func NewGetSchedulesRequest(server string, id JobSiteId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/job-sites/%s/schedules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateScheduleRequest calls the generic CreateSchedule builder with application/json body
func NewCreateScheduleRequest(server string, id JobSiteId, body CreateScheduleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateScheduleRequestWithBody(server, id, "application/json", bodyReader)
}

// NewCreateScheduleRequestWithBody generates requests for CreateSchedule with any type of body
func NewCreateScheduleRequestWithBody(server string, id JobSiteId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/job-sites/%s/schedules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetActiveSchedulesRequest generates requests for GetActiveSchedules
func NewGetActiveSchedulesRequest(server string, id JobSiteId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/job-sites/%s/schedules/active", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUpcomingSchedulesRequest generates requests for GetUpcomingSchedules
func NewGetUpcomingSchedulesRequest(server string, id JobSiteId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/job-sites/%s/schedules/upcoming", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewValidateScheduleOverlapRequest calls the generic ValidateScheduleOverlap builder with application/json body
func NewValidateScheduleOverlapRequest(server string, id JobSiteId, body ValidateScheduleOverlapJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewValidateScheduleOverlapRequestWithBody(server, id, "application/json", bodyReader)
}

// NewValidateScheduleOverlapRequestWithBody generates requests for ValidateScheduleOverlap with any type of body
func NewValidateScheduleOverlapRequestWithBody(server string, id JobSiteId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/job-sites/%s/schedules/validate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateTaskRequest calls the generic CreateTask builder with application/json body
func NewCreateTaskRequest(server string, id JobSiteId, body CreateTaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTaskRequestWithBody(server, id, "application/json", bodyReader)
}

// NewCreateTaskRequestWithBody generates requests for CreateTask with any type of body
func NewCreateTaskRequestWithBody(server string, id JobSiteId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/job-sites/%s/tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetScheduleRequest generates requests for GetSchedule
func NewGetScheduleRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/schedules/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTaskRequest generates requests for GetTask
func NewGetTaskRequest(server string, id TaskId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateTaskStatusRequest calls the generic UpdateTaskStatus builder with application/json body
func NewUpdateTaskStatusRequest(server string, id TaskId, body UpdateTaskStatusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateTaskStatusRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateTaskStatusRequestWithBody generates requests for UpdateTaskStatus with any type of body
func NewUpdateTaskStatusRequestWithBody(server string, id TaskId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/%s/status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetWorkerTasksRequest generates requests for GetWorkerTasks
func NewGetWorkerTasksRequest(server string, id string, params *GetWorkerTasksParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workers/%s/tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Date != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date", runtime.ParamLocationQuery, *params.Date); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRecordWorkerAttendanceRequest calls the generic RecordWorkerAttendance builder with application/json body
func NewRecordWorkerAttendanceRequest(server string, workerID WorkerId, body RecordWorkerAttendanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRecordWorkerAttendanceRequestWithBody(server, workerID, "application/json", bodyReader)
}

// NewRecordWorkerAttendanceRequestWithBody generates requests for RecordWorkerAttendance with any type of body
func NewRecordWorkerAttendanceRequestWithBody(server string, workerID WorkerId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workerID", runtime.ParamLocationPath, workerID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workers/%s/attendance", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateWorkerAttendanceRequest calls the generic UpdateWorkerAttendance builder with application/json body
func NewUpdateWorkerAttendanceRequest(server string, workerID WorkerId, body UpdateWorkerAttendanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateWorkerAttendanceRequestWithBody(server, workerID, "application/json", bodyReader)
}

// NewUpdateWorkerAttendanceRequestWithBody generates requests for UpdateWorkerAttendance with any type of body
func NewUpdateWorkerAttendanceRequestWithBody(server string, workerID WorkerId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workerID", runtime.ParamLocationPath, workerID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workers/%s/attendance", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// CreateJobSiteWithBodyWithResponse request with any body
	CreateJobSiteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateJobSiteResponse, error)

	CreateJobSiteWithResponse(ctx context.Context, body CreateJobSiteJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateJobSiteResponse, error)

	// GetJobSiteWithResponse request
	GetJobSiteWithResponse(ctx context.Context, id JobSiteId, reqEditors ...RequestEditorFn) (*GetJobSiteResponse, error)

	// GetSiteAttendanceWithResponse request
	GetSiteAttendanceWithResponse(ctx context.Context, id JobSiteId, params *GetSiteAttendanceParams, reqEditors ...RequestEditorFn) (*GetSiteAttendanceResponse, error)

	// GetSchedulesWithResponse request
	GetSchedulesWithResponse(ctx context.Context, id JobSiteId, reqEditors ...RequestEditorFn) (*GetSchedulesResponse, error)

	// CreateScheduleWithBodyWithResponse request with any body
	CreateScheduleWithBodyWithResponse(ctx context.Context, id JobSiteId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateScheduleResponse, error)

	CreateScheduleWithResponse(ctx context.Context, id JobSiteId, body CreateScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateScheduleResponse, error)

	// GetActiveSchedulesWithResponse request
	GetActiveSchedulesWithResponse(ctx context.Context, id JobSiteId, reqEditors ...RequestEditorFn) (*GetActiveSchedulesResponse, error)

	// GetUpcomingSchedulesWithResponse request
	GetUpcomingSchedulesWithResponse(ctx context.Context, id JobSiteId, reqEditors ...RequestEditorFn) (*GetUpcomingSchedulesResponse, error)

	// ValidateScheduleOverlapWithBodyWithResponse request with any body
	ValidateScheduleOverlapWithBodyWithResponse(ctx context.Context, id JobSiteId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ValidateScheduleOverlapResponse, error)

	ValidateScheduleOverlapWithResponse(ctx context.Context, id JobSiteId, body ValidateScheduleOverlapJSONRequestBody, reqEditors ...RequestEditorFn) (*ValidateScheduleOverlapResponse, error)

	// CreateTaskWithBodyWithResponse request with any body
	CreateTaskWithBodyWithResponse(ctx context.Context, id JobSiteId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTaskResponse, error)

	CreateTaskWithResponse(ctx context.Context, id JobSiteId, body CreateTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTaskResponse, error)

	// GetScheduleWithResponse request
	GetScheduleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetScheduleResponse, error)

	// GetTaskWithResponse request
	GetTaskWithResponse(ctx context.Context, id TaskId, reqEditors ...RequestEditorFn) (*GetTaskResponse, error)

	// UpdateTaskStatusWithBodyWithResponse request with any body
	UpdateTaskStatusWithBodyWithResponse(ctx context.Context, id TaskId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTaskStatusResponse, error)

	UpdateTaskStatusWithResponse(ctx context.Context, id TaskId, body UpdateTaskStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTaskStatusResponse, error)

	// GetWorkerTasksWithResponse request
	GetWorkerTasksWithResponse(ctx context.Context, id string, params *GetWorkerTasksParams, reqEditors ...RequestEditorFn) (*GetWorkerTasksResponse, error)

	// RecordWorkerAttendanceWithBodyWithResponse request with any body
	RecordWorkerAttendanceWithBodyWithResponse(ctx context.Context, workerID WorkerId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RecordWorkerAttendanceResponse, error)

	RecordWorkerAttendanceWithResponse(ctx context.Context, workerID WorkerId, body RecordWorkerAttendanceJSONRequestBody, reqEditors ...RequestEditorFn) (*RecordWorkerAttendanceResponse, error)

	// UpdateWorkerAttendanceWithBodyWithResponse request with any body
	UpdateWorkerAttendanceWithBodyWithResponse(ctx context.Context, workerID WorkerId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkerAttendanceResponse, error)

	UpdateWorkerAttendanceWithResponse(ctx context.Context, workerID WorkerId, body UpdateWorkerAttendanceJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateWorkerAttendanceResponse, error)
}

type CreateJobSiteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *JobSite
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r CreateJobSiteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateJobSiteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobSiteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JobSite
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetJobSiteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobSiteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSiteAttendanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AttendanceRecord
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetSiteAttendanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSiteAttendanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSchedulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Schedule
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetSchedulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSchedulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateScheduleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Schedule
	JSON400      *Error
	JSON409      *Error
}

// Status returns HTTPResponse.Status
func (r CreateScheduleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateScheduleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetActiveSchedulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Schedule
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetActiveSchedulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetActiveSchedulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUpcomingSchedulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Schedule
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetUpcomingSchedulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUpcomingSchedulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ValidateScheduleOverlapResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Valid *bool `json:"valid,omitempty"`
	}
	JSON409 *Error
}

// Status returns HTTPResponse.Status
func (r ValidateScheduleOverlapResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ValidateScheduleOverlapResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Id         *string `json:"id,omitempty"`
		ScheduleId *string `json:"schedule_id,omitempty"`
		WorkerId   *string `json:"worker_id,omitempty"`
	}
	JSON400 *Error
}

// Status returns HTTPResponse.Status
func (r CreateTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetScheduleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Schedule
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetScheduleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetScheduleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Task
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateTaskStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Status *string `json:"status,omitempty"`
	}
	JSON400 *Error
}

// Status returns HTTPResponse.Status
func (r UpdateTaskStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateTaskStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkerTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Task
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r GetWorkerTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkerTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RecordWorkerAttendanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Status *string `json:"status,omitempty"`
	}
	JSON400 *Error
}

// Status returns HTTPResponse.Status
func (r RecordWorkerAttendanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RecordWorkerAttendanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateWorkerAttendanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Status *string `json:"status,omitempty"`
	}
	JSON400 *Error
}

// Status returns HTTPResponse.Status
func (r UpdateWorkerAttendanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateWorkerAttendanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// CreateJobSiteWithBodyWithResponse request with arbitrary body returning *CreateJobSiteResponse
func (c *ClientWithResponses) CreateJobSiteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateJobSiteResponse, error) {
	rsp, err := c.CreateJobSiteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateJobSiteResponse(rsp)
}

func (c *ClientWithResponses) CreateJobSiteWithResponse(ctx context.Context, body CreateJobSiteJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateJobSiteResponse, error) {
	rsp, err := c.CreateJobSite(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateJobSiteResponse(rsp)
}

// GetJobSiteWithResponse request returning *GetJobSiteResponse
func (c *ClientWithResponses) GetJobSiteWithResponse(ctx context.Context, id JobSiteId, reqEditors ...RequestEditorFn) (*GetJobSiteResponse, error) {
	rsp, err := c.GetJobSite(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobSiteResponse(rsp)
}

// GetSiteAttendanceWithResponse request returning *GetSiteAttendanceResponse
func (c *ClientWithResponses) GetSiteAttendanceWithResponse(ctx context.Context, id JobSiteId, params *GetSiteAttendanceParams, reqEditors ...RequestEditorFn) (*GetSiteAttendanceResponse, error) {
	rsp, err := c.GetSiteAttendance(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSiteAttendanceResponse(rsp)
}

// GetSchedulesWithResponse request returning *GetSchedulesResponse
func (c *ClientWithResponses) GetSchedulesWithResponse(ctx context.Context, id JobSiteId, reqEditors ...RequestEditorFn) (*GetSchedulesResponse, error) {
	rsp, err := c.GetSchedules(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSchedulesResponse(rsp)
}

// CreateScheduleWithBodyWithResponse request with arbitrary body returning *CreateScheduleResponse
func (c *ClientWithResponses) CreateScheduleWithBodyWithResponse(ctx context.Context, id JobSiteId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateScheduleResponse, error) {
	rsp, err := c.CreateScheduleWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateScheduleResponse(rsp)
}

func (c *ClientWithResponses) CreateScheduleWithResponse(ctx context.Context, id JobSiteId, body CreateScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateScheduleResponse, error) {
	rsp, err := c.CreateSchedule(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateScheduleResponse(rsp)
}

// GetActiveSchedulesWithResponse request returning *GetActiveSchedulesResponse
func (c *ClientWithResponses) GetActiveSchedulesWithResponse(ctx context.Context, id JobSiteId, reqEditors ...RequestEditorFn) (*GetActiveSchedulesResponse, error) {
	rsp, err := c.GetActiveSchedules(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetActiveSchedulesResponse(rsp)
}

// GetUpcomingSchedulesWithResponse request returning *GetUpcomingSchedulesResponse
func (c *ClientWithResponses) GetUpcomingSchedulesWithResponse(ctx context.Context, id JobSiteId, reqEditors ...RequestEditorFn) (*GetUpcomingSchedulesResponse, error) {
	rsp, err := c.GetUpcomingSchedules(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUpcomingSchedulesResponse(rsp)
}

// ValidateScheduleOverlapWithBodyWithResponse request with arbitrary body returning *ValidateScheduleOverlapResponse
func (c *ClientWithResponses) ValidateScheduleOverlapWithBodyWithResponse(ctx context.Context, id JobSiteId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ValidateScheduleOverlapResponse, error) {
	rsp, err := c.ValidateScheduleOverlapWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseValidateScheduleOverlapResponse(rsp)
}

func (c *ClientWithResponses) ValidateScheduleOverlapWithResponse(ctx context.Context, id JobSiteId, body ValidateScheduleOverlapJSONRequestBody, reqEditors ...RequestEditorFn) (*ValidateScheduleOverlapResponse, error) {
	rsp, err := c.ValidateScheduleOverlap(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseValidateScheduleOverlapResponse(rsp)
}

// CreateTaskWithBodyWithResponse request with arbitrary body returning *CreateTaskResponse
func (c *ClientWithResponses) CreateTaskWithBodyWithResponse(ctx context.Context, id JobSiteId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTaskResponse, error) {
	rsp, err := c.CreateTaskWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTaskResponse(rsp)
}

func (c *ClientWithResponses) CreateTaskWithResponse(ctx context.Context, id JobSiteId, body CreateTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTaskResponse, error) {
	rsp, err := c.CreateTask(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTaskResponse(rsp)
}

// GetScheduleWithResponse request returning *GetScheduleResponse
func (c *ClientWithResponses) GetScheduleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetScheduleResponse, error) {
	rsp, err := c.GetSchedule(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetScheduleResponse(rsp)
}

// GetTaskWithResponse request returning *GetTaskResponse
func (c *ClientWithResponses) GetTaskWithResponse(ctx context.Context, id TaskId, reqEditors ...RequestEditorFn) (*GetTaskResponse, error) {
	rsp, err := c.GetTask(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTaskResponse(rsp)
}

// UpdateTaskStatusWithBodyWithResponse request with arbitrary body returning *UpdateTaskStatusResponse
func (c *ClientWithResponses) UpdateTaskStatusWithBodyWithResponse(ctx context.Context, id TaskId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTaskStatusResponse, error) {
	rsp, err := c.UpdateTaskStatusWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTaskStatusResponse(rsp)
}

func (c *ClientWithResponses) UpdateTaskStatusWithResponse(ctx context.Context, id TaskId, body UpdateTaskStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTaskStatusResponse, error) {
	rsp, err := c.UpdateTaskStatus(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTaskStatusResponse(rsp)
}

// GetWorkerTasksWithResponse request returning *GetWorkerTasksResponse
func (c *ClientWithResponses) GetWorkerTasksWithResponse(ctx context.Context, id string, params *GetWorkerTasksParams, reqEditors ...RequestEditorFn) (*GetWorkerTasksResponse, error) {
	rsp, err := c.GetWorkerTasks(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkerTasksResponse(rsp)
}

// RecordWorkerAttendanceWithBodyWithResponse request with arbitrary body returning *RecordWorkerAttendanceResponse
func (c *ClientWithResponses) RecordWorkerAttendanceWithBodyWithResponse(ctx context.Context, workerID WorkerId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RecordWorkerAttendanceResponse, error) {
	rsp, err := c.RecordWorkerAttendanceWithBody(ctx, workerID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRecordWorkerAttendanceResponse(rsp)
}

func (c *ClientWithResponses) RecordWorkerAttendanceWithResponse(ctx context.Context, workerID WorkerId, body RecordWorkerAttendanceJSONRequestBody, reqEditors ...RequestEditorFn) (*RecordWorkerAttendanceResponse, error) {
	rsp, err := c.RecordWorkerAttendance(ctx, workerID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRecordWorkerAttendanceResponse(rsp)
}

// UpdateWorkerAttendanceWithBodyWithResponse request with arbitrary body returning *UpdateWorkerAttendanceResponse
func (c *ClientWithResponses) UpdateWorkerAttendanceWithBodyWithResponse(ctx context.Context, workerID WorkerId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkerAttendanceResponse, error) {
	rsp, err := c.UpdateWorkerAttendanceWithBody(ctx, workerID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWorkerAttendanceResponse(rsp)
}

func (c *ClientWithResponses) UpdateWorkerAttendanceWithResponse(ctx context.Context, workerID WorkerId, body UpdateWorkerAttendanceJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateWorkerAttendanceResponse, error) {
	rsp, err := c.UpdateWorkerAttendance(ctx, workerID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWorkerAttendanceResponse(rsp)
}

// ParseCreateJobSiteResponse parses an HTTP response from a CreateJobSiteWithResponse call
func ParseCreateJobSiteResponse(rsp *http.Response) (*CreateJobSiteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateJobSiteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest JobSite
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetJobSiteResponse parses an HTTP response from a GetJobSiteWithResponse call
func ParseGetJobSiteResponse(rsp *http.Response) (*GetJobSiteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobSiteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JobSite
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetSiteAttendanceResponse parses an HTTP response from a GetSiteAttendanceWithResponse call
func ParseGetSiteAttendanceResponse(rsp *http.Response) (*GetSiteAttendanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSiteAttendanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AttendanceRecord
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetSchedulesResponse parses an HTTP response from a GetSchedulesWithResponse call
func ParseGetSchedulesResponse(rsp *http.Response) (*GetSchedulesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSchedulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Schedule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCreateScheduleResponse parses an HTTP response from a CreateScheduleWithResponse call
func ParseCreateScheduleResponse(rsp *http.Response) (*CreateScheduleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateScheduleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Schedule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetActiveSchedulesResponse parses an HTTP response from a GetActiveSchedulesWithResponse call
func ParseGetActiveSchedulesResponse(rsp *http.Response) (*GetActiveSchedulesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetActiveSchedulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Schedule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetUpcomingSchedulesResponse parses an HTTP response from a GetUpcomingSchedulesWithResponse call
func ParseGetUpcomingSchedulesResponse(rsp *http.Response) (*GetUpcomingSchedulesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUpcomingSchedulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Schedule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseValidateScheduleOverlapResponse parses an HTTP response from a ValidateScheduleOverlapWithResponse call
func ParseValidateScheduleOverlapResponse(rsp *http.Response) (*ValidateScheduleOverlapResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ValidateScheduleOverlapResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Valid *bool `json:"valid,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseCreateTaskResponse parses an HTTP response from a CreateTaskWithResponse call
func ParseCreateTaskResponse(rsp *http.Response) (*CreateTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Id         *string `json:"id,omitempty"`
			ScheduleId *string `json:"schedule_id,omitempty"`
			WorkerId   *string `json:"worker_id,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetScheduleResponse parses an HTTP response from a GetScheduleWithResponse call
func ParseGetScheduleResponse(rsp *http.Response) (*GetScheduleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetScheduleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Schedule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetTaskResponse parses an HTTP response from a GetTaskWithResponse call
func ParseGetTaskResponse(rsp *http.Response) (*GetTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Task
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateTaskStatusResponse parses an HTTP response from a UpdateTaskStatusWithResponse call
func ParseUpdateTaskStatusResponse(rsp *http.Response) (*UpdateTaskStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateTaskStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Status *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetWorkerTasksResponse parses an HTTP response from a GetWorkerTasksWithResponse call
func ParseGetWorkerTasksResponse(rsp *http.Response) (*GetWorkerTasksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkerTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Task
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseRecordWorkerAttendanceResponse parses an HTTP response from a RecordWorkerAttendanceWithResponse call
func ParseRecordWorkerAttendanceResponse(rsp *http.Response) (*RecordWorkerAttendanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RecordWorkerAttendanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Status *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseUpdateWorkerAttendanceResponse parses an HTTP response from a UpdateWorkerAttendanceWithResponse call
func ParseUpdateWorkerAttendanceResponse(rsp *http.Response) (*UpdateWorkerAttendanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateWorkerAttendanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Status *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}
