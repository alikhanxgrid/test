// Package apiv2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package apiv2

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get site productivity metrics
	// (GET /sites/{siteID}/productivity)
	GetSiteProductivity(c *gin.Context, siteID string, params GetSiteProductivityParams)
	// Get site task distribution
	// (GET /sites/{siteID}/tasks)
	GetSiteTaskDistribution(c *gin.Context, siteID string, params GetSiteTaskDistributionParams)
	// Get site utilization metrics
	// (GET /sites/{siteID}/utilization)
	GetSiteUtilization(c *gin.Context, siteID string, params GetSiteUtilizationParams)
	// Get worker task history
	// (GET /workers/{workerID}/history)
	GetWorkerTaskHistory(c *gin.Context, workerID string, params GetWorkerTaskHistoryParams)
	// Get worker productivity metrics
	// (GET /workers/{workerID}/productivity)
	GetWorkerProductivity(c *gin.Context, workerID string, params GetWorkerProductivityParams)
	// Get worker utilization metrics
	// (GET /workers/{workerID}/utilization)
	GetWorkerUtilization(c *gin.Context, workerID string, params GetWorkerUtilizationParams)
	// Get current tasks for a workflow
	// (GET /workflow/{workflowID}/tasks)
	GetWorkerCurrentTasks(c *gin.Context, workflowID string)
	// Get blockage status for a specific task
	// (GET /workflow/{workflowID}/tasks/{taskID}/blockage)
	GetTaskBlockageStatus(c *gin.Context, workflowID string, taskID string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetSiteProductivity operation middleware
func (siw *ServerInterfaceWrapper) GetSiteProductivity(c *gin.Context) {

	var err error

	// ------------- Path parameter "siteID" -------------
	var siteID string

	err = runtime.BindStyledParameterWithOptions("simple", "siteID", c.Param("siteID"), &siteID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter siteID: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSiteProductivityParams

	// ------------- Optional query parameter "start" -------------

	err = runtime.BindQueryParameter("form", true, false, "start", c.Request.URL.Query(), &params.Start)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter start: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "end" -------------

	err = runtime.BindQueryParameter("form", true, false, "end", c.Request.URL.Query(), &params.End)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter end: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSiteProductivity(c, siteID, params)
}

// GetSiteTaskDistribution operation middleware
func (siw *ServerInterfaceWrapper) GetSiteTaskDistribution(c *gin.Context) {

	var err error

	// ------------- Path parameter "siteID" -------------
	var siteID string

	err = runtime.BindStyledParameterWithOptions("simple", "siteID", c.Param("siteID"), &siteID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter siteID: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSiteTaskDistributionParams

	// ------------- Optional query parameter "start" -------------

	err = runtime.BindQueryParameter("form", true, false, "start", c.Request.URL.Query(), &params.Start)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter start: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "end" -------------

	err = runtime.BindQueryParameter("form", true, false, "end", c.Request.URL.Query(), &params.End)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter end: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSiteTaskDistribution(c, siteID, params)
}

// GetSiteUtilization operation middleware
func (siw *ServerInterfaceWrapper) GetSiteUtilization(c *gin.Context) {

	var err error

	// ------------- Path parameter "siteID" -------------
	var siteID string

	err = runtime.BindStyledParameterWithOptions("simple", "siteID", c.Param("siteID"), &siteID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter siteID: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSiteUtilizationParams

	// ------------- Optional query parameter "date" -------------

	err = runtime.BindQueryParameter("form", true, false, "date", c.Request.URL.Query(), &params.Date)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter date: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSiteUtilization(c, siteID, params)
}

// GetWorkerTaskHistory operation middleware
func (siw *ServerInterfaceWrapper) GetWorkerTaskHistory(c *gin.Context) {

	var err error

	// ------------- Path parameter "workerID" -------------
	var workerID string

	err = runtime.BindStyledParameterWithOptions("simple", "workerID", c.Param("workerID"), &workerID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter workerID: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetWorkerTaskHistoryParams

	// ------------- Optional query parameter "start" -------------

	err = runtime.BindQueryParameter("form", true, false, "start", c.Request.URL.Query(), &params.Start)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter start: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "end" -------------

	err = runtime.BindQueryParameter("form", true, false, "end", c.Request.URL.Query(), &params.End)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter end: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetWorkerTaskHistory(c, workerID, params)
}

// GetWorkerProductivity operation middleware
func (siw *ServerInterfaceWrapper) GetWorkerProductivity(c *gin.Context) {

	var err error

	// ------------- Path parameter "workerID" -------------
	var workerID string

	err = runtime.BindStyledParameterWithOptions("simple", "workerID", c.Param("workerID"), &workerID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter workerID: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetWorkerProductivityParams

	// ------------- Optional query parameter "start" -------------

	err = runtime.BindQueryParameter("form", true, false, "start", c.Request.URL.Query(), &params.Start)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter start: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "end" -------------

	err = runtime.BindQueryParameter("form", true, false, "end", c.Request.URL.Query(), &params.End)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter end: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetWorkerProductivity(c, workerID, params)
}

// GetWorkerUtilization operation middleware
func (siw *ServerInterfaceWrapper) GetWorkerUtilization(c *gin.Context) {

	var err error

	// ------------- Path parameter "workerID" -------------
	var workerID string

	err = runtime.BindStyledParameterWithOptions("simple", "workerID", c.Param("workerID"), &workerID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter workerID: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetWorkerUtilizationParams

	// ------------- Optional query parameter "date" -------------

	err = runtime.BindQueryParameter("form", true, false, "date", c.Request.URL.Query(), &params.Date)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter date: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetWorkerUtilization(c, workerID, params)
}

// GetWorkerCurrentTasks operation middleware
func (siw *ServerInterfaceWrapper) GetWorkerCurrentTasks(c *gin.Context) {

	var err error

	// ------------- Path parameter "workflowID" -------------
	var workflowID string

	err = runtime.BindStyledParameterWithOptions("simple", "workflowID", c.Param("workflowID"), &workflowID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter workflowID: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetWorkerCurrentTasks(c, workflowID)
}

// GetTaskBlockageStatus operation middleware
func (siw *ServerInterfaceWrapper) GetTaskBlockageStatus(c *gin.Context) {

	var err error

	// ------------- Path parameter "workflowID" -------------
	var workflowID string

	err = runtime.BindStyledParameterWithOptions("simple", "workflowID", c.Param("workflowID"), &workflowID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter workflowID: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "taskID" -------------
	var taskID string

	err = runtime.BindStyledParameterWithOptions("simple", "taskID", c.Param("taskID"), &taskID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter taskID: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTaskBlockageStatus(c, workflowID, taskID)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/sites/:siteID/productivity", wrapper.GetSiteProductivity)
	router.GET(options.BaseURL+"/sites/:siteID/tasks", wrapper.GetSiteTaskDistribution)
	router.GET(options.BaseURL+"/sites/:siteID/utilization", wrapper.GetSiteUtilization)
	router.GET(options.BaseURL+"/workers/:workerID/history", wrapper.GetWorkerTaskHistory)
	router.GET(options.BaseURL+"/workers/:workerID/productivity", wrapper.GetWorkerProductivity)
	router.GET(options.BaseURL+"/workers/:workerID/utilization", wrapper.GetWorkerUtilization)
	router.GET(options.BaseURL+"/workflow/:workflowID/tasks", wrapper.GetWorkerCurrentTasks)
	router.GET(options.BaseURL+"/workflow/:workflowID/tasks/:taskID/blockage", wrapper.GetTaskBlockageStatus)
}
