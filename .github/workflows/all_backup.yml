name: "Oracle PCA Instance Backup (all mode)"

on:
  workflow_dispatch:
    inputs:
      # Host names are required, e.g. "host1/host2"
      host-name:
        description: "Slash-delimited list of Host Names (e.g., 'host1/host2')"
        type: string
        required: true
        default: "iaas.pcan01.sherwin.com"

      # Host IP is optional. E.g. "192.168.1.1/192.168.1.2"
      host-ip:
        description: "Slash-delimited list of IPs (optional). If empty, we rely on host-name."
        type: string
        required: false

      tenancy-list:
        description: "Slash-delimited list of COMMA-delimited tenancy OCIDs for each host"
        type: string
        required: true

      bucket-name:
        description: "Slash-delimited bucket names, one per host"
        type: string
        required: true

      username:
        description: "PCA's local authentication username"
        required: true
        type: string

      oci-config-profile-name:
        description: "OCI config profile name"
        required: false
        type: string
        default: "DEFAULT"

jobs:
  run-backup:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install Dependencies
        run: |
          pip install -r requirements.txt

      - name: Configure OCI
        run: |
          mkdir -p ~/.oci
          echo "${{ secrets.OCI_CONFIG_CONTENTS }}" > ~/.oci/config
          echo "${{ secrets.OCI_PRIVATE_KEY }}" > ~/.oci/private.pem
          chmod 600 ~/.oci/config
          chmod 600 ~/.oci/private.pem
          echo "Listing ~/.oci"
          ls -l ~/.oci

      - name: Build JSON for all hosts & run script
        run: |
          echo "Constructing 'HOSTS' JSON array in bash..."

          # 1) Capture slash-delimited strings from user
          IPs="${{ inputs.host-ip }}"
          Names="${{ inputs.host-name }}"
          TenancyLists="${{ inputs.tenancy-list }}"
          Buckets="${{ inputs.bucket-name }}"

          # Convert slash-delimited host-name to array
          IFS='/' read -ra nameArr <<< "$Names"
          # Convert slash-delimited tenancies, buckets to arrays
          IFS='/' read -ra tenancyArr <<< "$TenancyLists"
          IFS='/' read -ra bucketArr <<< "$Buckets"

          # If host-ip was provided, parse it; else create an empty array 
          # (or fill with placeholders if you prefer).
          if [ -n "$IPs" ]; then
            echo "Detected IP input. Performing sanity checks..."
            IFS='/' read -ra ipArr <<< "$IPs"

            # Check if ipArr has the same length as nameArr (optional).
            if [ "${#ipArr[@]}" -ne "${#nameArr[@]}" ]; then
              echo "ERROR: Mismatched slash-delimited counts: #IPs != #HostNames"
              exit 1
            fi
          else
            echo "No IP input provided. Relying on host names only."
            # We'll create a parallel array of empty IPs
            ipArr=()
            # Fill ipArr with empty strings so it matches host-name count
            for (( i=0; i<"${#nameArr[@]}"; i++ )); do
              ipArr+=( "" )
            done
          fi

          # Also ensure # of nameArr == # of bucketArr == # of tenancyArr
          if [ "${#nameArr[@]}" -ne "${#bucketArr[@]}" ] || \
             [ "${#nameArr[@]}" -ne "${#tenancyArr[@]}" ]; then
            echo "ERROR: Mismatched slash-delimited counts among nameArr, bucketArr, or tenancyArr."
            exit 1
          fi

          # 2) Build the final JSON array string
          #    Example structure:
          #    [
          #      {
          #        "HOST_IP":"192.168.1.1",
          #        "HOST_NAME":"host1",
          #        "TENANCY_LIST":["ocid1.tenancy1","ocid1.tenancy2"],
          #        "BUCKET_NAME":"bucket1"
          #      },
          #      ...
          #    ]
          hosts_json="["
          for i in "${!nameArr[@]}"; do
            ip="${ipArr[$i]}"
            name="${nameArr[$i]}"
            raw_tenancies="${tenancyArr[$i]}"
            IFS=',' read -ra singleHostTenancies <<< "$raw_tenancies"

            # Build JSON array portion for "TENANCY_LIST"
            tenancyListJson="["
            for t in "${singleHostTenancies[@]}"; do
              tenancyListJson="$tenancyListJson\"$t\","
            done
            # remove trailing comma
            tenancyListJson="${tenancyListJson%,}]"

            bucket="${bucketArr[$i]}"

            # Add one object to the JSON array
            hosts_json="$hosts_json{
              \"HOST_IP\":\"$ip\",
              \"HOST_NAME\":\"$name\",
              \"TENANCY_LIST\":$tenancyListJson,
              \"BUCKET_NAME\":\"$bucket\"
            },"
          done

          # Remove final comma, close array
          hosts_json="${hosts_json%,}]"

          echo "Final HOSTS JSON:"
          echo "$hosts_json"

          # 3) Pass the JSON array to python script
          python instance-backup.py \
            --mode all \
            --oci-config "~/.oci/config" \
            --hosts "$hosts_json" \
            --username "${{ inputs.username }}" \
            --oci-config-profile-name "${{ inputs.oci-config-profile-name }}" \
            --password "${{ secrets.PCA_PASSWORD }}"
